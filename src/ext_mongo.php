<?hh
// @generated by docskel.php

/**
 * A connection between PHP and MongoDB.   This class extends MongoClient and
 * provides access to several deprecated methods.   For backwards
 * compatibility, it also defaults the "w" option of its constructor argument
 * to 0, which does not require write operations to be acknowledged by the
 * server. See MongoClient::__construct() for more information.    This class
 * has been DEPRECATED as of version 1.3.0. Relying on this feature is highly
 * discouraged. Please use MongoClient instead.
 */
class Mongo {
  /**
   * Connects with a database server
   *
   * @return bool - If the connection was successful.
   */
  <<__Native>>
  protected function connectUtil(): bool;

  /**
   * Get pool size for connection pools
   *
   * @return int - Returns the current pool size.
   */
  <<__Native>>
  public static function getPoolSize(): int;

  /**
   * Returns the address being used by this for slaveOkay reads
   *
   * @return string - The address of the secondary this connection is
   *   using for reads.   This returns NULL if this is not connected to a
   *   replica set or not yet initialized.
   */
  <<__Native>>
  public function getSlave(): string;

  /**
   * Get slaveOkay setting for this connection
   *
   * @return bool - Returns the value of slaveOkay for this instance.
   */
  <<__Native>>
  public function getSlaveOkay(): bool;

  /**
   * Returns information about all connection pools.
   *
   * @return array - Each connection pool has an identifier, which starts
   *   with the host. For each pool, this function shows the following
   *   fields:    in use    The number of connections currently being used
   *   by MongoClient instances.      in pool    The number of connections
   *   currently in the pool (not being used).      remaining    The number
   *   of connections that could be created by this pool. For example,
   *   suppose a pool had 5 connections remaining and 3 connections in the
   *   pool. We could create 8 new instances of MongoClient before we
   *   exhausted this pool (assuming no instances of MongoClient went out
   *   of scope, returning their connections to the pool).   A negative
   *   number means that this pool will spawn unlimited connections. 
   *   Before a pool is created, you can change the max number of
   *   connections by calling Mongo::setPoolSize(). Once a pool is showing
   *   up in the output of this function, its size cannot be changed.    
   *   timeout    The socket timeout for connections in this pool. This is
   *   how long connections in this pool will attempt to connect to a
   *   server before giving up.
   */
  <<__Native>>
  public function poolDebug(): array;

  /**
   * Set the size for future connection pools.
   *
   * @param int $size - The max number of connections future pools will
   *   be able to create. Negative numbers mean that the pool will spawn an
   *   infinite number of connections.
   *
   * @return bool - Returns the former value of pool size.
   */
  <<__Native>>
  public static function setPoolSize(int $size): bool;

  /**
   * Change slaveOkay setting for this connection
   *
   * @param bool $ok - If reads should be sent to secondary members of a
   *   replica set for all possible queries using this MongoClient
   *   instance.
   *
   * @return bool - Returns the former value of slaveOkay for this
   *   instance.
   */
  <<__Native>>
  public function setSlaveOkay(bool $ok = true): bool;

  /**
   * Choose a new secondary for slaveOkay reads
   *
   * @return string - The address of the secondary this connection is
   *   using for reads. This may be the same as the previous address as
   *   addresses are randomly chosen. It may return only one address if
   *   only one secondary (or only the primary) is available.   For
   *   example, if we had a three member replica set with a primary,
   *   secondary, and arbiter this method would always return the address
   *   of the secondary. If the secondary became unavailable, this method
   *   would always return the address of the primary. If the primary also
   *   became unavailable, this method would throw an exception, as an
   *   arbiter cannot handle reads.
   */
  <<__Native>>
  public function switchSlave(): string;

}

/**
 * An object that can be used to store or retrieve binary data from the
 * database.   The maximum size of a single object that can be inserted into
 * the database is 16MB. For data that is larger than this (movies, music,
 * Henry Kissinger's autobiography), use MongoGridFS. For data that is smaller
 * than 16MB, you may find it easier to embed it within the document using
 * MongoBinData.   For example, to embed an image in a document, one could
 * write:        This class contains a type field, which currently gives no
 * additional functionality in the PHP driver or the database. There are seven
 * predefined types, which are defined as class constants below. For backwards
 * compatibility, the PHP driver uses MongoBinData::BYTE_ARRAY as the default;
 * however, this may change to MongoBinData::GENERIC in the future. Users are
 * encouraged to specify a type in MongoBinData::__construct().
 */
class MongoBinData {
  /**
   * Creates a new binary data object.
   *
   * @param string $data - Binary data.
   * @param int $type - Data type.
   *
   * @return  - Returns a new binary data object.
   */
  <<__Native>>
  public function __construct(string $data,
                              int $type): void;

  /**
   * The string representation of this binary data object.
   *
   * @return string - Returns the string "Mongo Binary Data". To access
   *   the contents of a MongoBinData, use the bin field.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * A connection manager for PHP and MongoDB.   This class is used to create
 * and manage connections. A typical use is:  MongoClient basic usage     
 * See MongoClient::__construct() and the section on connecting for more
 * information about creating connections.
 */
class MongoClient {

  private ?resource $__manager = null;
  private ?resource $__servers = null;

  /**
   * Creates a new database connection object
   *
   * @param string $server - The server name. .
   * @param array $options - An array of options for the connection.
   * @param array $driver_options - An array of options for the MongoDB driver.
   *
   * @return  - Returns a new database connection object.
   */
  <<__Native>>
  public function __construct(string $server = 'mongodb://localhost:27017',
                              array $options = array('connect' => TRUE),
                              array $driver_options = array()): void;

  /**
   * Closes this connection
   *
   * @param boolean|string $connection - If connection is not given, or
   *   FALSE then connection that would be selected for writes would be
   *   closed. In a single-node configuration, that is then the whole
   *   connection, but if you are connected to a replica set, close() will
   *   only close the connection to the primary server.   If connection is
   *   TRUE then all connections as known by the connection manager will be
   *   closed. This can include connections that are not referenced in the
   *   connection string used to create the object that you are calling
   *   close on.   If connection is a string argument, then it will only
   *   close the connection identified by this hash. Hashes are identifiers
   *   for a connection and can be obtained by calling
   *   MongoClient::getConnections().
   *
   * @return bool - Returns if the connection was successfully closed.
   */
  <<__Native>>
  public function close(mixed $connection): bool;

  /**
   * Connects to a database server
   *
   * @return bool - If the connection was successful.
   */
  <<__Native>>
  public function connect(): bool;

  /**
   * Drops a database [deprecated]
   *
   * @param mixed $db - The database to drop. Can be a MongoDB object or
   *   the name of the database.
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function dropDB(mixed $db): array;

  /**
   * Gets a database
   *
   * @param string $dbname - The database name.
   *
   * @return MongoDB - Returns a new db object.
   */
  <<__Native>>
  public function __get(string $dbname): MongoDB;

  /**
   * Return info about all open connections
   *
   * @return array - An array of open connections.
   */
  <<__Native>>
  public static function getConnections(): array;

  /**
   * Updates status for all associated hosts
   *
   * @return array - Returns an array of information about the hosts in
   *   the set. Includes each host's hostname, its health (1 is healthy),
   *   its state (1 is primary, 2 is secondary, 0 is anything else), the
   *   amount of time it took to ping the server, and when the last ping
   *   occurred. For example, on a three-member replica set, it might look
   *   something like:
   */
  <<__Native>>
  public function getHosts(): array;

  /**
   * Get the read preference for this connection
   *
   * @return array -
   */
  <<__Native>>
  public function getReadPreference(): array;

  /**
   * Get the write concern for this connection
   *
   * @return array -
   */
  <<__Native>>
  public function getWriteConcern(): array;

  /**
   * Kills a specific cursor on the server
   *
   * @param string $server_hash - The server hash that has the cursor.
   *   This can be obtained through MongoCursor::info.
   * @param int|mongoint64 $id - The ID of the cursor to kill. You can
   *   either supply an int containing the 64 bit cursor ID, or an object
   *   of the MongoInt64 class. The latter is necessary on 32 bit platforms
   *   (and Windows).
   *
   * @return bool - Returns TRUE if the method attempted to kill a
   *   cursor, and FALSE if there was something wrong with the arguments
   *   (such as a wrong server_hash). The return status does not reflect
   *   where the cursor was actually killed as the server does not provide
   *   that information.
   */
  <<__Native>>
  public function killCursor(string $server_hash,
                             mixed $id): bool;

  /**
   * Lists all of the databases available.
   *
   * @return array - Returns an associative array containing three
   *   fields. The first field is databases, which in turn contains an
   *   array. Each element of the array is an associative array
   *   corresponding to a database, giving th database's name, size, and if
   *   it's empty. The other two fields are totalSize (in bytes) and ok,
   *   which is 1 if this method ran successfully.
   */
  <<__Native>>
  public function listDBs(): array;

  /**
   * Gets a database collection
   *
   * @param string $db - The database name.
   * @param string $collection - The collection name.
   *
   * @return MongoCollection - Returns a new collection object.
   */
  <<__Native>>
  public function selectCollection(string $db,
                                   string $collection): MongoCollection;

  /**
   * Gets a database
   *
   * @param string $name - The database name.
   *
   * @return MongoDB - Returns a new database object.
   */
  <<__Native>>
  public function selectDB(string $name): MongoDB;

  /**
   * Set the read preference for this connection
   *
   * @param string $read_preference -
   * @param array $tags -
   *
   * @return bool -
   */
  <<__Native>>
  public function setReadPreference(string $read_preference,
                                    array $tags): bool;

  /**
   * Set the write concern for this connection
   *
   * @param mixed $w -
   * @param int $wtimeout -
   *
   * @return bool -
   */
  <<__Native>>
  public function setWriteConcern(mixed $w,
                                  int $wtimeout): bool;

  /**
   * String representation of this connection
   *
   * @return string - Returns hostname and port for this connection.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Represents JavaScript code for the database.   MongoCode objects are
 * composed of two parts: a string of code and an optional scope. The string
 * of code must be valid JavaScript. The scope is a associative array of
 * variable name/value pairs.
 */
class MongoCode {
  /**
   * Creates a new code object
   *
   * @param string $code - A string of code.
   * @param array $scope - The scope to use for the code.
   *
   * @return  - Returns a new code object.
   */
  <<__Native>>
  public function __construct(string $code,
                              array $scope = array()): void;

  /**
   * Returns this code as a string
   *
   * @return string - This code, the scope is not returned.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Represents a MongoDB collection.   Collection names can use any character
 * in the ASCII set. Some valid collection names are , ..., my collection, and
 * *#@.   User-defined collection names cannot contain the $ symbol. There are
 * certain system collections which use a $ in their names (e.g.,
 * local.oplog.$main), but it is a reserved character. If you attempt to
 * create and use a collection with a $ in the name, MongoDB will assert.
 */
class MongoCollection {
  /**
   * Perform an aggregation using the aggregation framework
   *
   * @param array $op -
   * @param array $... -
   *
   * @return array - The result of the aggregation as an array. The ok
   *   will be set to 1 on success, 0 on failure.
   */
  <<__Native>>
  public function aggregate(array $op, ...): array;

  /**
   * Execute an aggregation pipeline command and retrieve results through a
   * cursor
   *
   * @param array $command -
   * @param array $options - Options for the aggregation command. Valid
   *   options include:   "allowDiskUse" Allow aggregation stages to write
   *   to temporary files   "cursor"  It is possible to configure how many
   *   initial documents the server should return with the first result
   *   set. The default initial batch size is 101. You can change it by
   *   adding the batchSize option:      This option only configures the
   *   size of the first batch. To configure the size of future batches,
   *   please use the MongoCommandCursor::batchSize method on the returned
   *   MongoCommandCursor object.    "explain"  Return information on the
   *   processing of the pipeline. This option may cause the command to
   *   return a result document that is unsuitable for constructing a
   *   MongoCommandCursor. If you need to use this option, you should
   *   consider using MongoCollection::aggregate.
   *
   * @return MongoCommandCursor - Returns a MongoCommandCursor object.
   *   Because this implements the Iterator interface you can iterate over
   *   each of the results as returned by the command query. The
   *   MongoCommandCursor also implements the MongoCursorInterface
   *   interface which adds the MongoCommandCursor::batchSize,
   *   MongoCommandCursor::dead, MongoCommandCursor::info methods.
   */
  <<__Native>>
  public function aggregateCursor(array $command,
                                  array $options): MongoCommandCursor;

  /**
   * Inserts multiple documents into this collection
   *
   * @param array $a - An array of arrays or objects. If any objects are
   *   used, they may not have protected or private properties.    If the
   *   documents to insert do not have an _id key or property, a new
   *   MongoId instance will be created and assigned to it. See
   *   MongoCollection::insert() for additional information on this
   *   behavior.
   * @param array $options - An array of options for the batch of insert
   *   operations. Currently available options include:  
   *   "continueOnError"   Boolean, defaults to FALSE. If set, the database
   *   will not stop processing a bulk insert if one fails (eg due to
   *   duplicate IDs). This makes bulk insert behave similarly to a series
   *   of single inserts, except that calling MongoDB::lastError() will
   *   have an error set if any insert fails, not just the last one. If
   *   multiple errors occur, only the most recent will be reported by
   *   MongoDB::lastError().    Please note that continueOnError affects
   *   errors on the database side only. If you try to insert a document
   *   that has errors (for example it contains a key with an empty name),
   *   then the document is not even transferred to the database as the
   *   driver detects this error and bails out. continueOnError has no
   *   effect on errors detected in the documents by the driver.       The
   *   following options are deprecated and should no longer be used:
   *
   * @return mixed - If the w parameter is set to acknowledge the write,
   *   returns an associative array with the status of the inserts ("ok")
   *   and any error that may have occurred ("err"). Otherwise, returns
   *   TRUE if the batch insert was successfully sent, FALSE otherwise.
   */
  <<__Native>>
  public function batchInsert(array $a,
                              array $options = array()): mixed;

  /**
   * Creates a new collection
   *
   * @param mongodb $db - Parent database.
   * @param string $name -
   *
   * @return  - Returns a new collection object.
   */
  <<__Native>>
  public function __construct(mongodb $db,
                              string $name): void;

  /**
   * Counts the number of documents in this collection
   *
   * @param array $query - Associative array or object with fields to
   *   match.
   * @param int $limit - Specifies an upper limit to the number returned.
   * @param int $skip - Specifies a number of results to skip before
   *   starting the count.
   *
   * @return int - Returns the number of documents matching the query.
   */
  <<__Native>>
  public function count(array $query = array(),
                        int $limit,
                        int $skip): int;

  /**
   * Creates a database reference
   *
   * @param mixed $document_or_id - If an array or object is given, its
   *   _id field will be used as the reference ID. If a MongoId or scalar
   *   is given, it will be used as the reference ID.
   *
   * @return array - Returns a database reference array.   If an array
   *   without an _id field was provided as the document_or_id parameter,
   *   NULL will be returned.
   */
  <<__Native>>
  public function createDBRef(mixed $document_or_id): array;

  /**
   * Creates an index on the specified field(s) if it does not already exist.
   *  
   *
   * @param array $keys - An array specifying the index's fields as its
   *   keys. For each field, the value is either the index direction or
   *   index type. If specifying direction, specify 1 for ascending or -1
   *   for descending.
   * @param array $options - An array of options for the index creation.
   *   Currently available options include:     The following option may be
   *   used with MongoDB 2.6+:     The following options may be used with
   *   MongoDB versions before 2.8:     The following options may be used
   *   with MongoDB versions before 2.6:     The following options are
   *   deprecated and should no longer be used:
   *
   * @return bool - Returns an array containing the status of the index
   *   creation. The array contains whether the operation succeeded ("ok"),
   *   the number of indexes before and after the operation
   *   ("numIndexesBefore" and "numIndexesAfter"), and whether the
   *   collection that the index belongs to has been created
   *   ("createdCollectionAutomatically"). If the index already existed and
   *   did not need to be created, a "note" field may be present in lieu of
   *   "numIndexesAfter".   With MongoDB 2.4 and earlier, a status document
   *   is only returned if the write concern is at least 1. Otherwise, TRUE
   *   is returned. The fields in the status document are different, except
   *   for the "ok" field, which signals whether the index creation was
   *   successful. Additional fields are described in the documentation for
   *   MongoCollection::insert().
   */
  <<__Native>>
  public function createIndex(array $keys,
                              array $options = array()): bool;

  /**
   * Deletes an index from this collection
   *
   * @param string|array $keys - An array specifying the index's fields
   *   as its keys. For each field, the value is either the index direction
   *   or index type. If specifying direction, specify 1 for ascending or
   *   -1 for descending.   If a string is provided, it is assumed to be
   *   the single field name in an ascending index.
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function deleteIndex(mixed $keys): array;

  /**
   * Delete all indices for this collection
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function deleteIndexes(): array;

  /**
   * Retrieve a list of distinct values for the given key across a collection.
   *
   * @param string $key -
   * @param array $query -
   *
   * @return array - Returns an array of distinct values,
   */
  <<__Native>>
  public function distinct(string $key,
                           array $query): array;

  /**
   * Drops this collection
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function drop(): array;

  /**
   * Creates an index on the specified field(s) if it does not already exist.
   *  
   *
   * @param string|array $key|keys -
   * @param array $options - An array of options for the index creation.
   *   Currently available options include:     The following option may be
   *   used with MongoDB 2.6+:     The following options may be used with
   *   MongoDB versions before 2.8:     The following options may be used
   *   with MongoDB versions before 2.6:     The following options are
   *   deprecated and should no longer be used:
   *
   * @return bool - Returns an array containing the status of the index
   *   creation. The array contains whether the operation succeeded ("ok"),
   *   the number of indexes before and after the operation
   *   ("numIndexesBefore" and "numIndexesAfter"), and whether the
   *   collection that the index belongs to has been created
   *   ("createdCollectionAutomatically"). If the index already existed and
   *   did not need to be created, a "note" field may be present in lieu of
   *   "numIndexesAfter".   With MongoDB 2.4 and earlier, a status document
   *   is only returned if the write concern is at least 1. Otherwise, TRUE
   *   is returned. The fields in the status document are different, except
   *   for the "ok" field, which signals whether the index creation was
   *   successful. Additional fields are described in the documentation for
   *   MongoCollection::insert().
   */
  <<__Native>>
  public function ensureIndex(mixed $key,
                              array $options = array()): bool;

  /**
   * Queries this collection, returning a
   *   for the result set
   *
   * @param array $query - The fields for which to search. MongoDB's
   *   query language is quite extensive. The PHP driver will in almost all
   *   cases pass the query straight through to the server, so reading the
   *   MongoDB core docs on find is a good idea.    Please make sure that
   *   for all special query operators (starting with $) you use single
   *   quotes so that PHP doesn't try to replace "$exists" with the value
   *   of the variable $exists.
   * @param array $fields - Fields of the results to return. The array is
   *   in the format array('fieldname' => true, 'fieldname2' => true). The
   *   _id field is always returned.
   *
   * @return MongoCursor - Returns a cursor for the search results.
   */
  <<__Native>>
  public function find(array $query = array(),
                       array $fields = array()): MongoCursor;

  /**
   * Update a document and return it
   *
   * @param array $query -
   * @param array $update -
   * @param array $fields -
   * @param array $options -
   *
   * @return array - Returns the original document, or the modified
   *   document when new is set.
   */
  <<__Native>>
  public function findAndModify(array $query,
                                array $update,
                                array $fields,
                                array $options): array;

  /**
   * Queries this collection, returning a single element
   *
   * @param array $query - The fields for which to search. MongoDB's
   *   query language is quite extensive. The PHP driver will in almost all
   *   cases pass the query straight through to the server, so reading the
   *   MongoDB core docs on find is a good idea.    Please make sure that
   *   for all special query operaters (starting with $) you use single
   *   quotes so that PHP doesn't try to replace "$exists" with the value
   *   of the variable $exists.
   * @param array $fields - Fields of the results to return. The array is
   *   in the format array('fieldname' => true, 'fieldname2' => true). The
   *   _id field is always returned.
   * @param array $options - This parameter is an associative array of
   *   the form array("name" => value, ...). Currently supported options
   *   are:
   *
   * @return array - Returns record matching the search or NULL.
   */
  <<__Native>>
  public function findOne(array $query = array(),
                          array $fields = array(),
                          array $options = array()): array;

  /**
   * Gets a collection
   *
   * @param string $name - The next string in the collection name.
   *
   * @return MongoCollection - Returns the collection.
   */
  <<__Native>>
  public function __get(string $name): MongoCollection;

  /**
   * Fetches the document pointed to by a database reference
   *
   * @param array $ref - A database reference.
   *
   * @return array - Returns the database document pointed to by the
   *   reference.
   */
  <<__Native>>
  public function getDBRef(array $ref): array;

  /**
   * Returns information about indexes on this collection
   *
   * @return array - This function returns an array in which each element
   *   describes an index. Elements will contain the values name for the
   *   name of the index, ns for the namespace (a combination of the
   *   database and collection name), and key for a list of all fields in
   *   the index and their ordering. Additional values may be present for
   *   special indexes, such as unique or sparse.
   */
  <<__Native>>
  public function getIndexInfo(): array;

  /**
   * Returns this collections name
   *
   * @return string - Returns the name of this collection.
   */
  <<__Native>>
  public function getName(): string;

  /**
   * Get the read preference for this collection
   *
   * @return array -
   */
  <<__Native>>
  public function getReadPreference(): array;

  /**
   * Get slaveOkay setting for this collection
   *
   * @return bool - Returns the value of slaveOkay for this instance.
   */
  <<__Native>>
  public function getSlaveOkay(): bool;

  /**
   * Get the write concern for this collection
   *
   * @return array -
   */
  <<__Native>>
  public function getWriteConcern(): array;

  /**
   * Performs an operation similar to SQL's GROUP BY command
   *
   * @param mixed $keys - Fields to group by. If an array or non-code
   *   object is passed, it will be the key used to group results.  1.0.4+:
   *   If keys is an instance of MongoCode, keys will be treated as a
   *   function that returns the key to group by (see the "Passing a keys
   *   function" example below).
   * @param array $initial - Initial value of the aggregation counter
   *   object.
   * @param mongocode $reduce - A function that takes two arguments (the
   *   current document and the aggregation to this point) and does the
   *   aggregation.
   * @param array $options - Optional parameters to the group command.
   *   Valid options include:     "condition"   Criteria for including a
   *   document in the aggregation.     "finalize"   Function called once
   *   per unique key that takes the final output of the reduce function.
   *
   * @return array - Returns an array containing the result.
   */
  <<__Native>>
  public function group(mixed $keys,
                        array $initial,
                        mongocode $reduce,
                        array $options = array()): array;

  /**
   * Inserts a document into the collection
   *
   * @param array|object $a - An array or object. If an object is used,
   *   it may not have protected or private properties.    If the parameter
   *   does not have an _id key or property, a new MongoId instance will be
   *   created and assigned to it. This special behavior does not mean that
   *   the parameter is passed by reference.
   * @param array $options - An array of options for the insert
   *   operation. Currently available options include:     The following
   *   options are deprecated and should no longer be used:
   *
   * @return bool|array - Returns an array containing the status of the
   *   insertion if the "w" option is set. Otherwise, returns TRUE if the
   *   inserted array is not empty (a MongoException will be thrown if the
   *   inserted array is empty).   If an array is returned, the following
   *   keys may be present:    ok    This should almost always be 1 (unless
   *   last_error itself failed).      err    If this field is non-null, an
   *   error occurred on the previous operation. If this field is set, it
   *   will be a string describing the error that occurred.      code    If
   *   a database error occurred, the relevant error code will be passed
   *   back to the client.      errmsg    This field is set if something
   *   goes wrong with a database command. It is coupled with ok being 0.
   *   For example, if w is set and times out, errmsg will be set to "timed
   *   out waiting for slaves" and ok will be 0. If this field is set, it
   *   will be a string describing the error that occurred.      n    If
   *   the last operation was an update, upsert, or a remove, the number of
   *   documents affected will be returned. For insert operations, this
   *   value is always 0.      wtimeout    If the previous option timed out
   *   waiting for replication.      waited    How long the operation
   *   waited before timing out.      wtime    If w was set and the
   *   operation succeeded, how long it took to replicate to w servers.   
   *    upserted    If an upsert occurred, this field will contain the new
   *   record's _id field. For upserts, either this field or
   *   updatedExisting will be present (unless an error occurred).    
   *   updatedExisting    If an upsert updated an existing element, this
   *   field will be true. For upserts, either this field or upserted will
   *   be present (unless an error occurred).
   */
  <<__Native>>
  public function insert(mixed $a,
                         array $options = array()): mixed;

  /**
   * Returns an array of cursors to iterator over a full collection in
   * parallel
   *
   * @param int $num_cursors - The number of cursors to request from the
   *   server. Please note, that the server can return less cursors than
   *   you requested.
   *
   * @return array[MongoCommandCursor] - Returns an array of
   *   MongoCommandCursor objects.
   */
  <<__Native>>
  public function parallelCollectionScan(int $num_cursors): array;

  /**
   * Remove records from this collection
   *
   * @param array $criteria - Query criteria for the documents to delete.
   * @param array $options - An array of options for the remove
   *   operation. Currently available options include:    "justOne" 
   *   Specify TRUE to limit deletion to just one document. If FALSE or
   *   omitted, all documents matching the criteria will be deleted.    
   *   The following options are deprecated and should no longer be used:
   *
   * @return bool|array - Returns an array containing the status of the
   *   removal if the "w" option is set. Otherwise, returns TRUE.   Fields
   *   in the status array are described in the documentation for
   *   MongoCollection::insert().
   */
  <<__Native>>
  public function remove(array $criteria = array(),
                         array $options = array()): mixed;

  /**
   * Saves a document to this collection
   *
   * @param array|object $a - Array or object to save. If an object is
   *   used, it may not have protected or private properties.    If the
   *   parameter does not have an _id key or property, a new MongoId
   *   instance will be created and assigned to it. See
   *   MongoCollection::insert() for additional information on this
   *   behavior.
   * @param array $options - Options for the save.
   *
   * @return mixed - If w was set, returns an array containing the status
   *   of the save. Otherwise, returns a boolean representing if the array
   *   was not empty (an empty array will not be inserted).
   */
  <<__Native>>
  public function save(mixed $a,
                       array $options = array()): mixed;

  /**
   * Set the read preference for this collection
   *
   * @param string $read_preference -
   * @param array $tags -
   *
   * @return bool -
   */
  <<__Native>>
  public function setReadPreference(string $read_preference,
                                    array $tags): bool;

  /**
   * Change slaveOkay setting for this collection
   *
   * @param bool $ok - If reads should be sent to secondary members of a
   *   replica set for all possible queries using this MongoCollection
   *   instance.
   *
   * @return bool - Returns the former value of slaveOkay for this
   *   instance.
   */
  <<__Native>>
  public function setSlaveOkay(bool $ok = true): bool;

  /**
   * Set the write concern for this database
   *
   * @param mixed $w -
   * @param int $wtimeout -
   *
   * @return bool -
   */
  <<__Native>>
  public function setWriteConcern(mixed $w,
                                  int $wtimeout): bool;

  /**
   * Converts keys specifying an index to its identifying string
   *
   * @param mixed $keys - Field or fields to convert to the identifying
   *   string
   *
   * @return string - Returns a string that describes the index.
   */
  <<__Native>>
  static protected function toIndexString(mixed $keys): string;

  /**
   * String representation of this collection
   *
   * @return string - Returns the full name of this collection.
   */
  <<__Native>>
  public function __toString(): string;

  /**
   * Update records based on a given criteria
   *
   * @param array $criteria - Query criteria for the documents to update.
   * @param array $new_object - The object used to update the matched
   *   documents. This may either contain update operators (for modifying
   *   specific fields) or be a replacement document.
   * @param array $options - An array of options for the update
   *   operation. Currently available options include:    "upsert"   If no
   *   document matches $criteria, a new document will be inserted.   If a
   *   new document would be inserted and $new_object contains atomic
   *   modifiers (i.e. $ operators), those operations will be applied to
   *   the $criteria parameter to create the new document. If $new_object
   *   does not contain atomic modifiers, it will be used as-is for the
   *   inserted document. See the upsert examples below for more
   *   information.     "multiple"   All documents matching $criteria will
   *   be updated. MongoCollection::update() has exactly the opposite
   *   behavior of MongoCollection::remove(): it updates one document by
   *   default, not all matching documents. It is recommended that you
   *   always specify whether you want to update multiple documents or a
   *   single document, as the database may change its default behavior at
   *   some point in the future.      The following options are deprecated
   *   and should no longer be used:
   *
   * @return bool|array - Returns an array containing the status of the
   *   update if the "w" option is set. Otherwise, returns TRUE.   Fields
   *   in the status array are described in the documentation for
   *   MongoCollection::insert().
   */
  <<__Native>>
  public function update(array $criteria,
                         array $new_object,
                         array $options = array()): mixed;

  /**
   * Validates this collection
   *
   * @param bool $scan_data - Only validate indices, not the base
   *   collection.
   *
   * @return array - Returns the databases evaluation of this object.
   */
  <<__Native>>
  public function validate(bool $scan_data = FALSE): array;

}

/**
 * A command cursor is used to iterate through the results of a database
 * command. A command cursor is similar to a normal MongoCursor except that
 * you use it for iterating through the result of a server command instead of
 * a the result of a query.   You don't generally create cursors using the
 * MongoCommandCursor constructor, you get a new cursor by calling
 * MongoCollection::commandCursor().   Using a command cursor instead of
 * MongoDB::command means that you can iterate over a much larger resultset as
 * the return of MongoDB::command is limited to the maximum document size
 * (currently 16MB).   Note that the cursor does not "contain" the database
 * command results, it just manages them. Thus, if you print a cursor (with,
 * say, var_dump() or print_r()), you'll just get the cursor object, not your
 * documents.
 */
class MongoCommandCursor {
  /**
   * Limits the number of elements returned in one batch.
   *
   * @param int $batchSize - The number of results to return per batch.
   *   Each batch requires a round-trip to the server.   This cannot
   *   override MongoDB's limit on the amount of data it will return to the
   *   client (i.e., if you set batch size to 1,000,000,000, MongoDB will
   *   still only return 4-16MB of results per batch).
   *
   * @return MongoCommandCursor - Returns this cursor.
   */
  <<__Native>>
  public function batchSize(int $batchSize): MongoCommandCursor;

  /**
   * Create a new command cursor
   *
   * @param mongoclient $connection - Database connection.
   * @param string $ns - Full name of database and collection.
   * @param array $command - Database command.
   *
   * @return  - Returns the new cursor.
   */
  <<__Native>>
  public function __construct(mongoclient $connection,
                              string $ns,
                              array $command = array()): void;

  /**
   * Create a new command cursor from an existing cursor document
   *
   * @param mongoclient $connection - Database connection.
   * @param string $hash - The connection has, as obtained through the
   *   third by-reference argument to MongoDB:command.
   * @param array $document - Document with cursor information in it.
   *   This document needs to contain the id, ns and firstBatch fields.
   *   Such a document is obtained by calling the MongoDB:command with
   *   appropriate arguments to return a cursor, and not just a result. See
   *   the example below.
   *
   * @return  - Returns the new cursor.
   */
  <<__Native>>
  public function createFromDocument(mongoclient $connection,
                                     string $hash,
                                     array $document): void;

  /**
   * Returns the current element
   *
   * @return array - The current result as an associative array.
   */
  <<__Native>>
  public function current(): array;

  /**
   * Checks if there are documents that have not been sent yet from the
   * database for this cursor
   *
   * @return bool - Returns if there are more results that have not been
   *   sent to the client, yet.
   */
  <<__Native>>
  public function dead(): bool;

  /**
   * Gets the query, fields, limit, and skip for this cursor
   *
   * @return array - Returns the namespace, limit, skip, query, fields,
   *   connection and iteration information for this cursor.
   */
  <<__Native>>
  public function info(): array;

  /**
   * Returns the current results _id
   *
   * @return string - The current results _id as a string.
   */
  <<__Native>>
  public function key(): string;

  /**
   * Advances the cursor to the next result
   *
   * @return void - NULL.
   */
  <<__Native>>
  public function next(): void;

  /**
   * Executes the command and resets the cursor to the start of the result set
   *
   * @return array - The raw server result document.   array(2) {
   *   ["cursor"]=> array(3) { ["id"]=> object(MongoInt64)#5 (1) {
   *   ["value"]=> string(12) "310050110216" } ["ns"]=> string(9)
   *   "demo.test" ["firstBatch"]=> array(1) { [0]=> array(2) { ["_id"]=>
   *   object(MongoId)#6 (1) { ["$id"]=> string(24)
   *   "52f5691544670a8077b0dc51" } ["value"]=> string(2) "42" } } }
   *   ["ok"]=> float(1) }
   */
  <<__Native>>
  public function rewind(): array;

  /**
   * Fetches a new result item, and returns whether it could
   *
   * @return bool - TRUE if a next item could be returned, and FALSE
   *   otherwise.
   */
  <<__Native>>
  public function valid(): bool;

}

/**
 * Thrown when the driver fails to connect to the database.   There are a
 * number of possible error messages to help you diagnose the connection
 * problem. These are:     No candidate servers found   Thrown when the driver
 * cannot establish a connection to MongoDB (fulfilling the ReadPreferences,
 * if specified).     No server name given.   This error occurs if you pass in
 * "" as the server name, probably because of an typo with string
 * interpolation, e.g., "$servr" instead of "$server".      failed to get host
 * [hostname] or port [portnum] from [server].    This indicated that the
 * server string was malformed. "[hostname]" and "[portnum]" will be as much
 * as the driver could dicipher of it.     Operation in progress   Connecting
 * to the database timed out.     Transport endpoint is not connected 
 * Generally means that the connection string isn't correct, the driver
 * couldn't even find the database server.     couldn't determine master   No
 * server in a replica set connection was identified as the primary.   
 * couldn't get host info for [server]   This indicated that DNS could not
 * resolve the server address you gave. This could easily be caused by a typo,
 * for example, "server" instead of "$server".     Invalid Argument   This can
 * be caused by attempting to connect to a machine that is up but that the
 * database isn't actually running on. Make sure that you've started the
 * database server before connecting.     Permission denied   This means that
 * the socket could not be opened due to permissions issues. On Red Hat
 * variants, this can be caused by a default setting that does not allow
 * Apache to create network connections. You can override this setting by
 * running:    then restarting Apache.     If the error message is not listed
 * above, it is probably an error from the C socket, and you can search the
 * web for its usual cause.
 */
class MongoConnectionException extends MongoException {
#    public function __toString() {
#        return $this->message  . "|" . $this->code;
#    }
}

/**
 * A cursor is used to iterate through the results of a database query. For
 * example, to query the database and see all results, you could do:
 * MongoCursor basic usage       You don't generally create cursors using the
 * MongoCursor constructor, you get a new cursor by calling
 * MongoCollection::find() (as shown above).   Suppose that, in the example
 * above, $collection was a 50GB collection. We certainly wouldn't want to
 * load that into memory all at once, which is what a cursor is for: allowing
 * the client to access the collection in dribs and drabs.   If we have a
 * large result set, we can iterate through it, loading a few megabytes of
 * results into memory at a time. For example, we could do:  Iterating over
 * MongoCursor     This will go through each document in the collection,
 * loading and garbage collecting documents as needed.   Note that this means
 * that a cursor does not "contain" the database results, it just manages
 * them. Thus, if you print a cursor (with, say, var_dump() or print_r()),
 * you'll just get the cursor object, not your documents. To get the documents
 * themselves, you can use one of the methods shown above.
 */
class MongoCursor {
  /**
   * Adds a top-level key/value pair to a query
   *
   * @param string $key - Fieldname to add.
   * @param mixed $value - Value to add.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function addOption(string $key,
                            mixed $value): MongoCursor;

  /**
   * Sets whether this cursor will wait for a while for a tailable cursor to
   * return more data
   *
   * @param bool $wait - If the cursor should wait for more data to
   *   become available.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function awaitData(bool $wait = true): MongoCursor;

  /**
   * Limits the number of elements returned in one batch.
   *
   * @param int $batchSize - The number of results to return per batch.
   *   Each batch requires a round-trip to the server.   If batchSize is 2
   *   or more, it represents the size of each batch of objects retrieved.
   *   It can be adjusted to optimize performance and limit data transfer.
   *    If batchSize is 1 or negative, it will limit of number returned
   *   documents to the absolute value of batchSize, and the cursor will be
   *   closed. For example if batchSize is -10, then the server will return
   *   a maximum of 10 documents and as many as can fit in 4MB, then close
   *   the cursor.    A batchSize of 1 is special, and means the same as
   *   -1, i.e. a value of 1 makes the cursor only capable of returning one
   *   document.    Note that this feature is different from
   *   MongoCursor::limit() in that documents must fit within a maximum
   *   size, and it removes the need to send a request to close the cursor
   *   server-side. The batch size can be changed even after a cursor is
   *   iterated, in which case the setting will apply on the next batch
   *   retrieval.   This cannot override MongoDB's limit on the amount of
   *   data it will return to the client (i.e., if you set batch size to
   *   1,000,000,000, MongoDB will still only return 4-16MB of results per
   *   batch).   To ensure consistent behavior, the rules of
   *   MongoCursor::batchSize() and MongoCursor::limit() behave a little
   *   complex but work "as expected". The rules are: hard limits override
   *   soft limits with preference given to MongoCursor::limit() over
   *   MongoCursor::batchSize(). After that, whichever is set and lower
   *   than the other will take precedence. See below. section for some
   *   examples.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function batchSize(int $batchSize): MongoCursor;

  /**
   * Create a new cursor
   *
   * @param mongoclient $connection - Database connection.
   * @param string $ns - Full name of database and collection.
   * @param array $query - Database query.
   * @param array $fields - Fields to return.
   *
   * @return  - Returns the new cursor.
   */
  <<__Native>>
  public function __construct(mongoclient $connection,
                              string $ns,
                              array $query = array(),
                              array $fields = array()): void;

  /**
   * Counts the number of results for this query
   *
   * @param bool $foundOnly -
   *
   * @return int - The number of documents returned by this cursor's
   *   query.
   */
  <<__Native>>
  public function count(bool $foundOnly = FALSE): int;

  /**
   * Returns the current element
   *
   * @return array - The current result as an associative array.
   */
  <<__Native>>
  public function current(): array;

  /**
   * Checks if there are documents that have not been sent yet from the
   * database for this cursor
   *
   * @return bool - Returns if there are more results that have not been
   *   sent to the client, yet.
   */
  <<__Native>>
  public function dead(): bool;

  /**
   * Execute the query.
   *
   * @return void - NULL.
   */
  <<__Native>>
  protected function doQuery(): void;

  /**
   * Return an explanation of the query, often useful for optimization and
   * debugging
   *
   * @return array - Returns an explanation of the query.
   */
  <<__Native>>
  public function explain(): array;

  /**
   * Sets the fields for a query
   *
   * @param array $f - Fields to return (or not return).
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function fields(array $f): MongoCursor;

  /**
   * Return the next object to which this cursor points, and advance the
   * cursor
   *
   * @return array - Returns the next object.
   */
  <<__Native>>
  public function getNext(): array;

  /**
   * Get the read preference for this query
   *
   * @return array -
   */
  <<__Native>>
  public function getReadPreference(): array;

  /**
   * Checks if there are any more elements in this cursor
   *
   * @return bool - Returns if there is another element.
   */
  <<__Native>>
  public function hasNext(): bool;

  /**
   * Gives the database a hint about the query
   *
   * @param mixed $index - Index to use for the query. If a string is
   *   passed, it should correspond to an index name. If an array or object
   *   is passed, it should correspond to the specification used to create
   *   the index (i.e. the first argument to
   *   MongoCollection::ensureIndex()).
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function hint(mixed $index): MongoCursor;

  /**
   * Sets whether this cursor will timeout
   *
   * @param bool $liveForever - If the cursor should be immortal.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function immortal(bool $liveForever = true): MongoCursor;

  /**
   * Gets the query, fields, limit, and skip for this cursor
   *
   * @return array - Returns the namespace, limit, skip, query, and
   *   fields for this cursor.
   */
  <<__Native>>
  public function info(): array;

  /**
   * Returns the current results _id
   *
   * @return string - The current results _id as a string.
   */
  <<__Native>>
  public function key(): string;

  /**
   * Limits the number of results returned
   *
   * @param int $num - The number of results to return.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function limit(int $num): MongoCursor;

  /**
   * Sets a server-side timeout for this query
   *
   * @param int $ms -
   *
   * @return MongoCursor - This cursor.
   */
  <<__Native>>
  public function maxTimeMS(int $ms): MongoCursor;

  /**
   * Advances the cursor to the next result
   *
   * @return void - NULL.
   */
  <<__Native>>
  public function next(): void;

  /**
   * If this query should fetch partial results from  if a shard is down
   *
   * @param bool $okay - If receiving partial results is okay.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function partial(bool $okay = true): MongoCursor;

  /**
   * Clears the cursor
   *
   * @return void - NULL.
   */
  <<__Native>>
  public function reset(): void;

  /**
   * Returns the cursor to the beginning of the result set
   *
   * @return void - NULL.
   */
  <<__Native>>
  public function rewind(): void;

  /**
   * Sets arbitrary flags in case there is no method available the specific
   * flag
   *
   * @param int $flag - Which flag to set. You can not set flag 6
   *   (EXHAUST) as the driver does not know how to handle them. You will
   *   get a warning if you try to use this flag. For available flags,
   *   please refer to the wire protocol documentation.
   * @param bool $set - Whether the flag should be set (TRUE) or unset
   *   (FALSE).
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function setFlag(int $flag,
                          bool $set = true): MongoCursor;

  /**
   * Set the read preference for this query
   *
   * @param string $read_preference -
   * @param array $tags -
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function setReadPreference(string $read_preference,
                                    array $tags): MongoCursor;

  /**
   * Skips a number of results
   *
   * @param int $num - The number of results to skip.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function skip(int $num): MongoCursor;

  /**
   * Sets whether this query can be done on a secondary [deprecated]
   *
   * @param bool $okay - If it is okay to query the secondary.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function slaveOkay(bool $okay = true): MongoCursor;

  /**
   * Use snapshot mode for the query
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function snapshot(): MongoCursor;

  /**
   * Sorts the results by given fields
   *
   * @param array $fields - An array of fields by which to sort. Each
   *   element in the array has as key the field name, and as value either
   *   1 for ascending sort, or -1 for descending sort.   Each result is
   *   first sorted on the first field in the array, then (if it exists) on
   *   the second field in the array, etc. This means that the order of the
   *   fields in the fields array is important. See also the examples
   *   section.
   *
   * @return MongoCursor - Returns the same cursor that this method was
   *   called on.
   */
  <<__Native>>
  public function sort(array $fields): MongoCursor;

  /**
   * Sets whether this cursor will be left open after fetching the last
   * results
   *
   * @param bool $tail - If the cursor should be tailable.
   *
   * @return MongoCursor - Returns this cursor.
   */
  <<__Native>>
  public function tailable(bool $tail = true): MongoCursor;

  /**
   * Sets a client-side timeout for this query
   *
   * @param int $ms -
   *
   * @return MongoCursor - This cursor.
   */
  <<__Native>>
  public function timeout(int $ms): MongoCursor;

  /**
   * Checks if the cursor is reading a valid result.
   *
   * @return bool - If the current result is not null.
   */
  <<__Native>>
  public function valid(): bool;

}

/**
 * Caused by accessing a cursor incorrectly or a error receiving a reply. Note
 * that this can be thrown by any database request that receives a reply, not
 * just queries. Writes, commands, and any other operation that sends
 * information to the database and waits for a response can throw a
 * MongoCursorException. The only exception is new MongoClient() (creating a
 * new connection), which will only throw MongoConnectionExceptions.   This
 * returns a specific error message to help diagnose the problem and a numeric
 * error code associated with the cause of the exception.   For example,
 * suppose you tried to insert two documents with the same _id:    This would
 * produce output like:    Note that the MongoDB error code (11000) is used
 * for the PHP error code. The PHP driver uses the "native" error code
 * wherever possible.   The following is a list of common errors, codes, and
 * causes. Exact errors are in italics, errors where the message can vary are
 * described in obliques.     cannot modify cursor after beginning iteration 
 * Code: 0   You are calling a method that sets up the query after executing
 * the query. Reset the cursor and try again.   An example:        Get next
 * batch send errors   Code: 1   Could not send the query to the database.
 * Make sure the database is still up and the network is okay.     cursor not
 * found   Code: 2   The driver was trying to fetch more results from the
 * database, but the database did not have a record of the query. This usually
 * means that the cursor timed out on the server side: after a few minutes of
 * inactivity, the database will kill a cursor (see MongoCursor::immortal()
 * for information on preventing this).   An example:        cursor->buf.pos
 * is null   Code: 3   This may indicate you are out of RAM or some other
 * extraordinary circumstance.     couldn't get response header   Code: 4   A
 * common error if the database or network goes down. This means that the
 * driver couldn't get a response from the connection.     no db response 
 * Code: 5   This may not even be an error, for example, the database command
 * "shutdown" returns no response. However, if you were expecting a response,
 * this means the database didn't give one.     bad response length: %d, did
 * the db assert?   Code: 6   This means that the database said that its
 * response was less than 0. This error probably indicates a network error or
 * database corruption.     incomplete header   Code: 7   Highly unusual.
 * Occurs if the database response started out correctly, but broke off in the
 * middle. Probably indicates a network problem.     incomplete response 
 * Code: 8   Highly unusual. Occurs if the database response started out
 * correctly, but broke off in the middle. Probably indicates a network
 * problem.     couldn't find a response   Code: 9   If the response was
 * cached and now cannot be located.     error getting socket   Code: 10   The
 * socket was closed or encountered an error. The driver should automatically
 * reconnect (if possible) on the next operation.     couldn't find reply,
 * please try again   Code: 11   The driver saves any database responses it
 * cannot immediately match with a request. This exception occurs if the
 * driver has already passed your request's response and cannot find your
 * response in its cache.     error getting database response: errstr   WSA
 * error getting database response: errstr   "errstr" is an io error reported
 * directly from the C socket subsystem. On Windows, the error message is
 * prefixed with "WSA".     Timeout error   Code: 13   If there was an error
 * while waiting for a query to complete.     couldn't send query: various 
 * Code: 14   C socket error on send.     max number of retries exhausted,
 * couldn't send query   Code: 19   The driver will automatically retry
 * "plain" queries (not commands) a couple of times if the first attempt
 * failed for certain reasons. This is to cause fewer exceptions during
 * replica set failover (although you will probably still have to deal with
 * some) and gloss over transient network issues.   This can also be caused by
 * the driver not being able to reconnect at all to the database (if, for
 * example, the database is unreachable).   Version 1.2.2+.
 */
class MongoCursorException {
  /**
   * The hostname of the server that encountered the error
   *
   * @return string - Returns the hostname, or NULL if the hostname is
   *   unknown.
   */
  <<__Native>>
  public function getHost(): string;

}

/**
 * Caused by a query timing out. You can set the length of time to wait before
 * this exception is thrown by calling MongoCursor::timeout() on the cursor or
 * setting MongoCursor::$timeout. The static variable is useful for queries
 * such as database commands and MongoCollection::findOne(), both of which
 * implicitly use cursors.
 */
class MongoCursorTimeoutException {
}

/**
 * Represent date objects for the database. This class should be used to save
 * dates to the database and to query for dates. For example:   Storing dates
 * with MongoDate      MongoDB stores dates as milliseconds past the epoch.
 * This means that dates do not contain timezone information. Timezones must
 * be stored in a separate field if needed. Second, this means that any
 * precision beyond milliseconds will be lost when the document is sent
 * to/from the database.
 */
class MongoDate {
  /**
   * Creates a new date.
   *
   * @param int $sec - Number of seconds since January 1st, 1970.
   * @param int $usec - Microseconds. Please be aware though that
   *   MongoDB's resolution is milliseconds and not microseconds, which
   *   means this value will be truncated to millisecond resolution.
   *
   * @return  - Returns this new date.
   */
  <<__Native>>
  public function __construct(int $sec, int $usec): void;

  /**
   * Returns a string representation of this date
   *
   * @return string - This date.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Instances of this class are used to interact with a database. To get a
 * database:  Selecting a database     Database names can use almost any
 * character in the ASCII range. However, they cannot contain , . or be the
 * empty string. The name "system" is also reserved.   A few unusual, but
 * valid, database names: null, [x,y], 3, \, /.   Unlike collection names,
 * database names may contain $.
 */
class MongoDB {
  /**
   * Log in to this database
   *
   * @param string $username - The username.
   * @param string $password - The password (in plaintext).
   *
   * @return array - Returns database response. If the login was
   *   successful, it will return    If something went wrong, it will
   *   return    ("auth fails" could be another message, depending on
   *   database version and what when wrong).
   */
  <<__Native>>
  public function authenticate(string $username,
                               string $password): array;

  /**
   * Execute a database command
   *
   * @param array $command - The query to send.
   * @param array $options - An array of options for the index creation.
   *   Currently available options include:     The following options are
   *   deprecated and should no longer be used:
   *
   * @return array - Returns database response. Every database response
   *   is always maximum one document, which means that the result of a
   *   database command can never exceed 16MB. The resulting document's
   *   structure depends on the command, but most results will have the ok
   *   field to indicate success or failure and results containing an array
   *   of each of the resulting documents.
   */
  <<__Native>>
  public function command(array $command,
                          array $options = array()): array;

  /**
   * Creates a new database
   *
   * @param mongoclient $conn - Database connection.
   * @param string $name - Database name.
   *
   * @return  - Returns the database.
   */
  <<__Native>>
  public function __construct(mongoclient $conn,
                              string $name): void;

  /**
   * Creates a collection
   *
   * @param string $name - The name of the collection.
   * @param array $options - An array containing options for the
   *   collections. Each option is its own element in the options array,
   *   with the option name listed below being the key of the element. The
   *   supported options depend on the MongoDB server version. At the
   *   moment, the following options are supported:      capped    If the
   *   collection should be a fixed size.      size    If the collection is
   *   fixed size, its size in bytes.      max    If the collection is
   *   fixed size, the maximum number of elements to store in the
   *   collection.      autoIndexId    If capped is TRUE you can specify
   *   FALSE to disable the automatic index created on the _id field.
   *   Before MongoDB 2.2, the default value for autoIndexId was FALSE.
   *
   * @return MongoCollection - Returns a collection object representing
   *   the new collection.
   */
  <<__Native>>
  public function createCollection(string $name,
                                   array $options): MongoCollection;

  /**
   * Creates a database reference
   *
   * @param string $collection - The collection to which the database
   *   reference will point.
   * @param mixed $document_or_id - If an array or object is given, its
   *   _id field will be used as the reference ID. If a MongoId or scalar
   *   is given, it will be used as the reference ID.
   *
   * @return array - Returns a database reference array.   If an array
   *   without an _id field was provided as the document_or_id parameter,
   *   NULL will be returned.
   */
  <<__Native>>
  public function createDBRef(string $collection,
                              mixed $document_or_id): array;

  /**
   * Drops this database
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function drop(): array;

  /**
   * Drops a collection [deprecated]
   *
   * @param mixed $coll - MongoCollection or name of collection to drop.
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function dropCollection(mixed $coll): array;

  /**
   * Runs JavaScript code on the database server.
   *
   * @param mixed $code - MongoCode or string to execute.
   * @param array $args - Arguments to be passed to code.
   *
   * @return array - Returns the result of the evaluation.
   */
  <<__Native>>
  public function execute(mixed $code,
                          array $args = array()): array;

  /**
   * Creates a database error
   *
   * @return bool - Returns the database response.
   */
  <<__Native>>
  public function forceError(): bool;

  /**
   * Gets a collection
   *
   * @param string $name - The name of the collection.
   *
   * @return MongoCollection - Returns the collection.
   */
  <<__Native>>
  public function __get(string $name): MongoCollection;

  /**
   * Get all collections from this database
   *
   * @param bool $includeSystemCollections -
   *
   * @return array - Returns the names of the all the collections in the
   *   database as an array.
   */
  <<__Native>>
  public function getCollectionNames(bool $includeSystemCollections = false): array;

  /**
   * Fetches the document pointed to by a database reference
   *
   * @param array $ref - A database reference.
   *
   * @return array - Returns the document pointed to by the reference.
   */
  <<__Native>>
  public function getDBRef(array $ref): array;

  /**
   * Fetches toolkit for dealing with files stored in this database
   *
   * @param string $prefix - The prefix for the files and chunks
   *   collections.
   *
   * @return MongoGridFS - Returns a new gridfs object for this database.
   */
  <<__Native>>
  public function getGridFS(string $prefix = fs): MongoGridFS;

  /**
   * Gets this databases profiling level
   *
   * @return int - Returns the profiling level.
   */
  <<__Native>>
  public function getProfilingLevel(): int;

  /**
   * Get the read preference for this database
   *
   * @return array -
   */
  <<__Native>>
  public function getReadPreference(): array;

  /**
   * Get slaveOkay setting for this database
   *
   * @return bool - Returns the value of slaveOkay for this instance.
   */
  <<__Native>>
  public function getSlaveOkay(): bool;

  /**
   * Get the write concern for this database
   *
   * @return array -
   */
  <<__Native>>
  public function getWriteConcern(): array;

  /**
   * Check if there was an error on the most recent db operation performed
   *
   * @return array - Returns the error, if there was one.
   */
  <<__Native>>
  public function lastError(): array;

  /**
   * Gets an array of all MongoCollections for this database
   *
   * @param bool $includeSystemCollections -
   *
   * @return array - Returns an array of MongoCollection objects.
   */
  <<__Native>>
  public function listCollections(bool $includeSystemCollections = false): array;

  /**
   * Checks for the last error thrown during a database operation
   *
   * @return array - Returns the error and the number of operations ago
   *   it occurred.
   */
  <<__Native>>
  public function prevError(): array;

  /**
   * Repairs and compacts this database
   *
   * @param bool $preserve_cloned_files - If cloned files should be kept
   *   if the repair fails.
   * @param bool $backup_original_files - If original files should be
   *   backed up.
   *
   * @return array - Returns db response.
   */
  <<__Native>>
  public function repair(bool $preserve_cloned_files = FALSE,
                         bool $backup_original_files = FALSE): array;

  /**
   * Clears any flagged errors on the database
   *
   * @return array - Returns the database response.
   */
  <<__Native>>
  public function resetError(): array;

  /**
   * Gets a collection
   *
   * @param string $name - The collection name.
   *
   * @return MongoCollection - Returns a new collection object.
   */
  <<__Native>>
  public function selectCollection(string $name): MongoCollection;

  /**
   * Sets this databases profiling level
   *
   * @param int $level - Profiling level.
   *
   * @return int - Returns the previous profiling level.
   */
  <<__Native>>
  public function setProfilingLevel(int $level): int;

  /**
   * Set the read preference for this database
   *
   * @param string $read_preference -
   * @param array $tags -
   *
   * @return bool -
   */
  <<__Native>>
  public function setReadPreference(string $read_preference,
                                    array $tags): bool;

  /**
   * Change slaveOkay setting for this database
   *
   * @param bool $ok - If reads should be sent to secondary members of a
   *   replica set for all possible queries using this MongoDB instance.
   *
   * @return bool - Returns the former value of slaveOkay for this
   *   instance.
   */
  <<__Native>>
  public function setSlaveOkay(bool $ok = true): bool;

  /**
   * Set the write concern for this database
   *
   * @param mixed $w -
   * @param int $wtimeout -
   *
   * @return bool -
   */
  <<__Native>>
  public function setWriteConcern(mixed $w,
                                  int $wtimeout): bool;

  /**
   * The name of this database
   *
   * @return string - Returns this databases name.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * This class can be used to create lightweight links between objects in
 * different collections.   Motivation: Suppose we need to refer to a document
 * in another collection. The easiest way is to create a field in the current
 * document. For example, if we had a "people" collection and an "addresses"
 * collection, we might want to create a link between each person document and
 * an address document:  Linking documents       Then, later on, we can find
 * the person's address by querying the "addresses" collection with the
 * MongoId we saved in the "people" collection.   Suppose now that we have a
 * more general case, where we don't know which collection (or even which
 * database) contains the referenced document. MongoDBRef is a good choice for
 * this case, as it is a common format that all of the drivers and the
 * database understand.   If each person had a list of things they liked which
 * could come from multiple collections, such as "hobbies", "sports", "books",
 * etc., we could use MongoDBRefs to keep track of what "like" went with what
 * collection:  Creating MongoDBRef links       Database references can be
 * thought of as hyperlinks: they give the unique address of another document,
 * but they do not load it or automatically follow the link/reference.   A
 * database reference is just a normal associative array, not an instance of
 * MongoDBRef, so this class is a little different than the other data type
 * classes. This class contains exclusively static methods for manipulating
 * database references.
 */
class MongoDBRef {
  /**
   * Creates a new database reference
   *
   * @param string $collection - Collection name (without the database
   *   name).
   * @param mixed $id - The _id field of the object to which to link.
   * @param string $database - Database name.
   *
   * @return array - Returns the reference.
   */
  <<__Native>>
  public static function create(string $collection,
                                mixed $id,
                                string $database): array;

  /**
   * Fetches the object pointed to by a reference
   *
   * @param mongodb $db - Database to use.
   * @param array $ref - Reference to fetch.
   *
   * @return array - Returns the document to which the reference refers
   *   or NULL if the document does not exist (the reference is broken).
   */
  <<__Native>>
  public static function get(mongodb $db,
                             array $ref): array;

  /**
   * Checks if an array is a database reference
   *
   * @param mixed $ref - Array or object to check.
   *
   * @return bool -
   */
  <<__Native>>
  public static function isRef(mixed $ref): bool;

}

/**
 * Constructs a batch of DELETE operations. See MongoWriteBatch.
 */
class MongoDeleteBatch {
  /**
   * Description
   *
   * @param mongocollection $collection -
   * @param array $write_options -
   *
   * @return  - A new MongoDeleteBatch.
   */
  <<__Native>>
  public function __construct(mongocollection $collection,
                              array $write_options): void;

}

/**
 * Thrown when attempting to insert a document into a collection which already
 * contains the same values for the unique keys.
 */
class MongoDuplicateKeyException {
}

/**
 * Default Mongo exception.   This covers a bunch of different error
 * conditions that may eventually be moved to more specific exceptions, but
 * will always extend MongoException.     The MongoSomething object has not
 * been correctly initialized by its constructor   Code: 0   Probably your
 * Mongo object is not connected to a database server.     zero-length keys
 * are not allowed, did you use $ with double quotes?   Code: 1   You tried to
 * save "" as a key. You generally should not do this. "" can mess up
 * subobject access and is used by MongoDB internally. However, if you really
 * want, you can set mongo.allow_empty_keys to true in your php.ini file to
 * override this sanity check. If you override this, it is highly recommended
 * that you set error checking to strict to avoid string interpolation errors.
 *     '.' not allowed in key: key   Code: 2   You attempted to write a key
 * with '.' in it, which is prohibited.     insert too large: size, max: max 
 * Code: 3   You're attempting to send too much data to the database at once:
 * the database will only accept inserts up to a certain size (currently 16
 * MB).     no elements in doc   Code: 4   You're attempting to save a
 * document with no fields.     size of BSON doc is size bytes, max maxMB 
 * Code: 5   You're attempting to save a document that is larger than MongoDB
 * can save.     no documents given   Code: 6   You're attempting to batch
 * insert an empty array of documents.     MongoCollection::group takes an
 * array, object, or MongoCode key   Code: 7   Wrong type parameter send to
 * MongoCollection::group().     field names must be strings   Code: 8   You
 * should format field selectors as array("field1" = 1, "field2" = 1, ...,
 * "fieldN" = 1).     invalid regex   Code: 9   The regex passed to MongoRegex
 * is not of the correct form.     MongoDBRef::get: $ref field must be a
 * string   Code: 10     MongoDBRef::get: $db field must be a string   Code:
 * 11     non-utf8 string: str   Code: 12   This error occurs if you attempt
 * to send a non-utf8 string to the database. All strings going into the
 * database should be UTF8. See php.ini options for the transition option of
 * quieting this exception.     mutex error: err   Code: 13   The driver uses
 * mutexes for synchronizing requests and responses in multithreaded
 * environments. This is a fairly serious error and may not have a stack
 * trace. It's unusual and should be reported to maintainers with any system
 * information and steps to reproduce that you can provide.     index name too
 * long: len, max max characters   Code: 14   Indexes with names longer than
 * 128 characters cannot be created. If you get this error, you should use
 * MongoCollection::ensureIndex()'s "name" option to create a shorter name for
 * your index.
 */
class MongoException extends Exception {
}

/**
 * Thrown when a operation times out server side (i.e. in MongoDB).   To
 * configure the operation timeout threshold, use MongoCursor::maxTimeMS or
 * the "maxTimeMS" command option.
 */
class MongoExecutionTimeoutException {
}

/**
 * Utilities for storing and retrieving files from the database.   GridFS is a
 * storage specification all supported drivers implement. Basically, it
 * defines two collections: files, for file metadata, and chunks, for file
 * content. If the file is large, it will automatically be split into smaller
 * chunks and each chunk will be saved as a document in the chunks collection.
 *   Each document in the files collection contains the filename, upload date,
 * and md5 hash. It also contains a unique _id field, which can be used to
 * query the chunks collection for the file's content. Each document in the
 * chunks collection contains a chunk of binary data, a files_id field that
 * matches its file's _id, and the position of this chunk in the overall file.
 *   For example, the files document is something like:    and the chunks
 * documents look like:    Of course, the default chunk size is thousands of
 * bytes, but that makes an unwieldy example.
 */
class MongoGridFS {
  /**
   * Creates new file collections
   *
   * @param mongodb $db - Database.
   * @param string $prefix -
   * @param mixed $chunks -
   *
   * @return  -
   */
  <<__Native>>
  public function __construct(mongodb $db,
                              string $prefix = fs,
                              mixed $chunks = fs): void;

  /**
   * Remove a file and its chunks from the database
   *
   * @param mixed $id - _id of the file to remove.
   *
   * @return bool|array - Returns an array containing the status of the
   *   removal (with respect to the files collection) if a write concern is
   *   applied. Otherwise, returns TRUE.   Fields in the status array are
   *   described in the documentation for MongoCollection::insert().
   */
  <<__Native>>
  public function delete(mixed $id): mixed;

  /**
   * Drops the files and chunks collections
   *
   * @return array - The database response.
   */
  <<__Native>>
  public function drop(): array;

  /**
   * Queries for files
   *
   * @param array $query - The query.
   * @param array $fields - Fields to return.
   *
   * @return MongoGridFSCursor - A MongoGridFSCursor.
   */
  <<__Native>>
  public function find(array $query = array(),
                       array $fields = array()): MongoGridFSCursor;

  /**
   * Returns a single file matching the criteria
   *
   * @param mixed $query - The filename or criteria for which to search.
   * @param mixed $fields -
   *
   * @return MongoGridFSFile - Returns a MongoGridFSFile or NULL.
   */
  <<__Native>>
  public function findOne(mixed $query = array(),
                          mixed $fields = array()): MongoGridFSFile;

  /**
   * Retrieve a file from the database
   *
   * @param mixed $id - _id of the file to find.
   *
   * @return MongoGridFSFile - Returns the file, if found, or NULL.
   */
  <<__Native>>
  public function get(mixed $id): MongoGridFSFile;

  /**
   * Stores a file in the database
   *
   * @param string $filename - Name of the file to store.
   * @param array $metadata - Other metadata fields to include in the
   *   file document.
   * @param array $options - An array of options for the insert
   *   operations executed against the chunks and files collections. See
   *   MongoCollection::insert() for documentation on these these options.
   *
   * @return mixed -
   */
  <<__Native>>
  public function put(string $filename,
                      array $metadata = array(),
                      array $options = array()): mixed;

  /**
   * Remove files and their chunks from the database
   *
   * @param array $criteria - The filename or criteria for which to
   *   search.
   * @param array $options - An array of options for the remove
   *   operations executed against the chunks and files collections. See
   *   MongoCollection::remove() for documentation on these options.
   *
   * @return bool|array - Returns an array containing the status of the
   *   removal (with respect to the files collection) if the "w" option is
   *   set. Otherwise, returns TRUE.   Fields in the status array are
   *   described in the documentation for MongoCollection::insert().
   */
  <<__Native>>
  public function remove(array $criteria = array(),
                         array $options = array()): mixed;

  /**
   * Stores a string of bytes in the database
   *
   * @param string $bytes - String of bytes to store.
   * @param array $metadata - Other metadata fields to include in the
   *   file document.
   * @param array $options - An array of options for the insert
   *   operations executed against the chunks and files collections. See
   *   MongoCollection::insert() for documentation on these these options.
   *
   * @return mixed -
   */
  <<__Native>>
  public function storeBytes(string $bytes,
                             array $metadata = array(),
                             array $options = array()): mixed;

  /**
   * Stores a file in the database
   *
   * @param string $filename - Name of the file to store.
   * @param array $metadata - Other metadata fields to include in the
   *   file document.
   * @param array $options - An array of options for the insert
   *   operations executed against the chunks and files collections. See
   *   MongoCollection::insert() for documentation on these these options.
   *
   * @return mixed -
   */
  <<__Native>>
  public function storeFile(string $filename,
                            array $metadata = array(),
                            array $options = array()): mixed;

  /**
   * Stores an uploaded file in the database
   *
   * @param string $name - The name of the uploaded file(s) to store.
   *   This should correspond to the file field's name attribute in the
   *   HTML form.
   * @param array $metadata - Other metadata fields to include in the
   *   file document.    The filename field will be populated with the
   *   client's filename (e.g. $_FILES['foo']['name']).
   *
   * @return mixed - If multiple files are uploaded using the same field
   *   name, this method will not return anything; however, the files
   *   themselves will still be processed.
   */
  <<__Native>>
  public function storeUpload(string $name,
                              array $metadata): mixed;

}

/**
 * Cursor for database file results.
 */
class MongoGridFSCursor {
  /**
   * Create a new cursor
   *
   * @param mongogridfs $gridfs - Related GridFS collection.
   * @param resource $connection - Database connection.
   * @param string $ns - Full name of database and collection.
   * @param array $query - Database query.
   * @param array $fields - Fields to return.
   *
   * @return  - Returns the new cursor.
   */
  <<__Native>>
  public function __construct(mongogridfs $gridfs,
                              resource $connection,
                              string $ns,
                              array $query,
                              array $fields): void;

  /**
   * Returns the current file
   *
   * @return MongoGridFSFile - The current file.
   */
  <<__Native>>
  public function current(): MongoGridFSFile;

  /**
   * Return the next file to which this cursor points, and advance the cursor
   *
   * @return MongoGridFSFile - Returns the next file.
   */
  <<__Native>>
  public function getNext(): MongoGridFSFile;

  /**
   * Returns the current results filename
   *
   * @return string - The current results _id as a string.
   */
  <<__Native>>
  public function key(): string;

}

/**
 * Thrown when there are errors reading or writing files to or from the
 * database.
 */
class MongoGridFSException {
}

/**
 * A database file object.
 */
class MongoGridFSFile {
  /**
   * Create a new GridFS file
   *
   * @param mongogridfs $gridfs - The parent MongoGridFS instance.
   * @param array $file - A file from the database.
   *
   * @return  - Returns a new MongoGridFSFile.
   */
  <<__Native>>
  public function __construct(mongogridfs $gridfs,
                              array $file): void;

  /**
   * Returns this files contents as a string of bytes
   *
   * @return string - Returns a string of the bytes in the file.
   */
  <<__Native>>
  public function getBytes(): string;

  /**
   * Returns this files filename
   *
   * @return string - Returns the filename.
   */
  <<__Native>>
  public function getFilename(): string;

  /**
   * Returns a resource that can be used to read the stored file
   *
   * @return stream - Returns a resource that can be used to read the
   *   file with
   */
  <<__Native>>
  public function getResource(): stream;

  /**
   * Returns this files size
   *
   * @return int - Returns this file's size
   */
  <<__Native>>
  public function getSize(): int;

  /**
   * Writes this file to the filesystem
   *
   * @param string $filename - The location to which to write the file.
   *   If none is given, the stored filename will be used.
   *
   * @return int - Returns the number of bytes written.
   */
  <<__Native>>
  public function write(string $filename = NULL): int;

}

/**
 * A unique identifier created for database objects. If an object is inserted
 * into the database without an _id field, an _id field will be added to it
 * with a MongoId instance as its value. If the data has a naturally occuring
 * unique field (e.g. username or timestamp) it is fine to use this as the _id
 * field instead, and it will not be replaced with a MongoId.   Instances of
 * the MongoId class fulfill the role that autoincrementing does in a
 * relational database: to provide a unique key if the data does not natually
 * have one. Autoincrementing does not work well with a sharded database, as
 * it is difficult to determine the next number in the sequence. This class
 * fulfills the constraints of quickly generating a value that is unique
 * across shards.   Each MongoId is 12 bytes (making its string form 24
 * hexadecimal characters). The first four bytes are a timestamp, the next
 * three are a hash of the client machine's hostname, the next two are the two
 * least significant bytes of the process id running the script, and the last
 * three bytes are an incrementing value.   MongoIds are
 * serializable/unserializable. Their serialized form is similar to their
 * string form:
 */
class MongoId {
  /**
   * Creates a new id
   *
   * @param string $id - A string to use as the id. Must be 24
   *   hexidecimal characters.
   *
   * @return  - Returns a new id.
   */
  <<__Native>>
  public function __construct(string $id = NULL): void;

  /**
   * Gets the hostname being used for this machine's ids
   *
   * @return string - Returns the hostname.
   */
  <<__Native>>
  public static function getHostname(): string;

  /**
   * Gets the incremented value to create this id
   *
   * @return int - Returns the incremented value used to create this
   *   MongoId.
   */
  <<__Native>>
  public function getInc(): int;

  /**
   * Gets the process ID
   *
   * @return int - Returns the PID of the MongoId.
   */
  <<__Native>>
  public function getPID(): int;

  /**
   * Gets the number of seconds since the epoch that this id was created
   *
   * @return int - Returns the number of seconds since the epoch that
   *   this id was created. There are only four bytes of timestamp stored,
   *   so MongoDate is a better choice for storing exact or wide-ranging
   *   times.
   */
  <<__Native>>
  public function getTimestamp(): int;

  /**
   * Check if a value is a valid ObjectId
   *
   * @param mixed $value - The value to check for validity.
   *
   * @return bool - Returns TRUE if value is a MongoId instance or a
   *   string consisting of exactly 24 hexadecimal characters; otherwise,
   *   FALSE is returned.
   */
  <<__Native>>
  public static function isValid(mixed $value): bool;

  /**
   * Create a dummy MongoId
   *
   * @param array $props - Theoretically, an array of properties used to
   *   create the new id. However, as MongoId instances have no properties,
   *   this is not used.
   *
   * @return MongoId - A new id with the value
   *   "000000000000000000000000".
   */
  <<__Native>>
  public static function __set_state(array $props): MongoId;

  /**
   * Returns a hexidecimal representation of this id
   *
   * @return string - This id.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Constructs a batch of INSERT operations. See MongoWriteBatch.
 */
class MongoInsertBatch {
  /**
   * Description
   *
   * @param mongocollection $collection -
   * @param array $write_options -
   *
   * @return  - A new MongoInsertBatch.
   */
  <<__Native>>
  public function __construct(mongocollection $collection,
                              array $write_options): void;

}

/**
 * The class can be used to save 32-bit integers to the database on a 64-bit
 * system.
 */
class MongoInt32 {
  /**
   * Creates a new 32-bit integer.
   *
   * @param string $value - A number.
   *
   * @return  - Returns a new integer.
   */
  <<__Native>>
  public function __construct(string $value): void;

  /**
   * Returns the string representation of this 32-bit integer.
   *
   * @return string - Returns the string representation of this integer.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * The class can be used to save 64-bit integers to the database on a 32-bit
 * system.
 */
class MongoInt64 {
  /**
   * Creates a new 64-bit integer.
   *
   * @param string $value - A number.
   *
   * @return  - Returns a new integer.
   */
  <<__Native>>
  public function __construct(string $value): void;

  /**
   * Returns the string representation of this 64-bit integer.
   *
   * @return string - Returns the string representation of this integer.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Logging can be used to get detailed information about what the driver is
 * doing. Logging is disabled by default, but this class allows you to
 * activate specific levels of logging for various parts of the driver. Some
 * examples:       By default, MongoLog emits all log messages as PHP notices.
 * Depending on the SAPI you use, messages may be sent to stderr (for CLI) or
 * the web server's error log. If, after configuring MongoLog, log messages
 * are not appearing as expected, ensure that the E_NOTICE bit is included in
 * error_reporting and that display_errors is on.
 */
class MongoLog {
  /**
   * Gets the previously set callback function
   *
   * @return callable - Returns the callback function, or FALSE if not
   *   set yet.
   */
  <<__Native>>
  public static function getCallback(): callable;

  /**
   * Gets the level(s) currently being logged
   *
   * @return int - Returns the level(s) currently being logged.
   */
  <<__Native>>
  public static function getLevel(): int;

  /**
   * Gets the module(s) currently being logged
   *
   * @return int - Returns the module(s) currently being logged.
   */
  <<__Native>>
  public static function getModule(): int;

  /**
   * Sets a callback function to be invoked for events
   *
   * @param callable $log_function - The callback function to be invoked
   *   on events. It should have the following prototype:    log_function
   *   intmodule intlevel stringmessage    module   One of the MongoLog
   *   module constants.     level   One of the MongoLog level constants. 
   *     message   The log message itself.
   *
   * @return void -
   */
  <<__Native>>
  public static function setCallback(callable $log_function): void;

  /**
   * Sets the level(s) to be logged
   *
   * @param int $level - The level(s) you would like to log.
   *
   * @return void -
   */
  <<__Native>>
  public static function setLevel(int $level): void;

  /**
   * Sets the module(s) to be logged
   *
   * @param int $module - The module(s) you would like to log.
   *
   * @return void -
   */
  <<__Native>>
  public static function setModule(int $module): void;

}

/**
 * MongoMaxKey is a special type used by the database that evaluates to
 * greater than any other type. Thus, if a query is sorted by a given field in
 * ascending order, any document with a MongoMaxKey as its value will be
 * returned last.   MongoMaxKey has no associated fields, methods, or
 * constants. It is merely the "largest" thing that can be inserted into the
 * database.
 */
class MongoMaxKey {
}

/**
 * MongoMinKey is a special type used by the database that evaluates to less
 * than any other type. Thus, if a query is sorted by a given field in
 * ascending order, any document with a MongoMinKey as its value will be
 * returned first.   MongoMinKey has no associated fields, methods, or
 * constants. It is merely the "smallest" thing that can be inserted into the
 * database.
 */
class MongoMinKey {
}

/**
 * The current (1.3.0+) releases of the driver no longer implements pooling.
 * This class and its methods are therefore deprecated and should not be used.
 */
class MongoPool {
  /**
   * Get pool size for connection pools
   *
   * @return int - Returns the current pool size.
   */
  <<__Native>>
  public static function getSize(): int;

  /**
   * Returns information about all connection pools.
   *
   * @return array - Each connection pool has an identifier, which starts
   *   with the host. For each pool, this function shows the following
   *   fields:    in use    The number of connections currently being used
   *   by Mongo instances.      in pool    The number of connections
   *   currently in the pool (not being used).      remaining    The number
   *   of connections that could be created by this pool. For example,
   *   suppose a pool had 5 connections remaining and 3 connections in the
   *   pool. We could create 8 new instances of MongoClient before we
   *   exhausted this pool (assuming no instances of MongoClient went out
   *   of scope, returning their connections to the pool).   A negative
   *   number means that this pool will spawn unlimited connections. 
   *   Before a pool is created, you can change the max number of
   *   connections by calling Mongo::setPoolSize(). Once a pool is showing
   *   up in the output of this function, its size cannot be changed.    
   *   total    The total number of connections allowed for this pool. This
   *   should be greater than or equal to "in use" + "in pool" (or -1).   
   *    timeout    The socket timeout for connections in this pool. This is
   *   how long connections in this pool will attempt to connect to a
   *   server before giving up.      waiting    If you have capped the pool
   *   size, workers requesting connections from the pool may block until
   *   other workers return their connections. This field shows how many
   *   milliseconds workers have blocked for connections to be released. If
   *   this number keeps increasing, you may want to use
   *   MongoPool::setSize() to add more connections to your pool.
   */
  <<__Native>>
  public function info(): array;

  /**
   * Set the size for future connection pools.
   *
   * @param int $size - The max number of connections future pools will
   *   be able to create. Negative numbers mean that the pool will spawn an
   *   infinite number of connections.
   *
   * @return bool - Returns the former value of pool size.
   */
  <<__Native>>
  public static function setSize(int $size): bool;

}

/**
 * When talking to MongoDB 2.6.0, and later, certain operations (such as
 * writes) may throw MongoProtocolException when the response from the server
 * did not make sense - for example during network failure (we could read the
 * entire response) or data corruption.   This exception is also thrown when
 * attempting to talk newer protocols then the server supports, for example
 * using the MongoWriteBatch when talking to a MongoDB server prior to 2.6.0.
 */
class MongoProtocolException {
}

/**
 * This class can be used to create regular expressions. Typically, these
 * expressions will be used to query the database and find matching strings.
 * More unusually, they can be saved to the database and retrieved.   Regular
 * expressions consist of four parts. First a / as starting delimiter, then
 * the pattern, another / and finally a string containing flags.    Regular
 * expression pattern       MongoDB recognizes six regular expression flags: 
 *   i: Case insensitive     m: Multiline     x: Can contain comments     l:
 * locale     s: dotall, "." matches everything, including newlines     u:
 * match unicode
 */
class MongoRegex {
  /**
   * Creates a new regular expression
   *
   * @param string $regex - Regular expression string of the form
   *   /expr/flags.
   *
   * @return  - Returns a new regular expression.
   */
  <<__Native>>
  public function __construct(string $regex): void;

  /**
   * A string representation of this regular expression
   *
   * @return string - This regular expression in the form "/expr/flags".
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * The MongoResultException is thrown by several command helpers (such as
 * MongoCollection::findAndModify) in the event of failure. The original
 * result document is available through MongoResultException::getDocument.
 */
class MongoResultException {
  /**
   * Retrieve the full result document
   *
   * @return array - The full result document as an array, including
   *   partial data if available and additional keys.
   */
  <<__Native>>
  public function getDocument(): array;

}

/**
 * MongoTimestamp is used by sharding. If you're not looking to write sharding
 * tools, what you probably want is MongoDate.   MongoTimestamp is 4 bytes of
 * timestamp (seconds since the epoch) and 4 bytes of increment.    This class
 * is not for measuring time, creating a timestamp on a document or
 * automatically adding or updating a timestamp on a document.  Unless you are
 * writing something that interacts with the sharding internals, stop, go
 * directly to MongoDate, do not pass go, do not collect 200 dollars. This is
 * not the class you are looking for.   If you are writing sharding tools,
 * read on.
 */
class MongoTimestamp {
  /**
   * Creates a new timestamp.
   *
   * @param int $sec - Number of seconds since January 1st, 1970.
   * @param int $inc - Increment.
   *
   * @return  - Returns this new timestamp.
   */
  <<__Native>>
  public function __construct(int $sec, int $inc): void;

  /**
   * Returns a string representation of this timestamp
   *
   * @return string - The seconds since epoch represented by this
   *   timestamp.
   */
  <<__Native>>
  public function __toString(): string;

}

/**
 * Constructs a batch of UPDATE operations. See MongoWriteBatch.
 */
class MongoUpdateBatch {
  /**
   * Description
   *
   * @param mongocollection $collection -
   * @param array $write_options -
   *
   * @return  - A new MongoUpdateBatch.
   */
  <<__Native>>
  public function __construct(mongocollection $collection,
                              array $write_options): void;

}

/**
 * MongoWriteBatch is the base class for the MongoInsertBatch,
 * MongoUpdateBatch and MongoDeleteBatch classes.   MongoWriteBatch allows you
 * to "batch up" multiple operations (of same type) and shipping them all to
 * MongoDB at the same time. This can be especially useful when operating on
 * many documents at the same time to reduce roundtrips.   Prior to version
 * 1.5.0 of the driver it was possible to use MongoCollection::batchInsert,
 * however, as of 1.5.0 that method is now discouraged.   Note: This class is
 * only available when talking to MongoDB 2.6.0 (and later) servers. It will
 * throw MongoProtocolException if attempting to use it on older MongoDB
 * servers.
 */
class MongoWriteBatch {
  /**
   * Adds an CRUD operation to a batch
   *
   * @param array $item -
   *
   * @return bool - Returns TRUE on success, throws exception on failure.
   */
  <<__Native>>
  public function add(array $item): bool;

  /**
   * Description
   *
   * @param array $write_options -
   *
   * @return array - Returns an array containing statistical information
   *   for the full batch. If the batch had to be split into multiple
   *   batches, the return value will aggregate the values from individual
   *   batches and return only the totals.   If the batch was empty, an
   *   array containing only the 'ok' field is returned (as TRUE) although
   *   nothing will be shipped over the wire (NOOP).      Array key Value
   *   meaning Returned for batch type     nInserted Number of inserted
   *   documents MongoWriteBatch::COMMAND_INSERT batch   nMatched Number of
   *   documents matching the query criteria
   *   MongoWriteBatch::COMMAND_UPDATE batch   nModified Number of
   *   documents actually needed to be modied
   *   MongoWriteBatch::COMMAND_UPDATE batch   nUpserted Number of upserted
   *   documents MongoWriteBatch::COMMAND_UPDATE batch   nRemoved Number of
   *   documents removed MongoWriteBatch::COMMAND_DELETE batch   ok Command
   *   success indicator All
   */
  <<__Native>>
  final public function execute(array $write_options): array;

}

/**
 * MongoWriteConcernException is thrown when a write fails. See  for how to
 * set failure thresholds.   Prior to MongoDB 2.6.0 GLE would determin when a
 * write failed.
 */
class MongoWriteConcernException {
  /**
   * Get the error document
   *
   * @return array - A MongoDB document, if available, as an array.
   */
  <<__Native>>
  public function getDocument(): array;

}

/**
 * Callback When Deleting Documents
 *
 * @param array $server -
 * @param array $writeOptions -
 * @param array $deleteOptions -
 * @param array $protocolOptions -
 *
 * @return  -
 */
<<__Native>>
function log_cmd_delete(array $server,
                        array $writeOptions,
                        array $deleteOptions,
                        array $protocolOptions): void;

/**
 * Callback When Inserting Documents
 *
 * @param array $server -
 * @param array $document -
 * @param array $writeOptions -
 * @param array $protocolOptions -
 *
 * @return  -
 */
<<__Native>>
function log_cmd_insert(array $server,
                        array $document,
                        array $writeOptions,
                        array $protocolOptions): void;

/**
 * Callback When Updating Documents
 *
 * @param array $server -
 * @param array $writeOptions -
 * @param array $updateOptions -
 * @param array $protocolOptions -
 *
 * @return  -
 */
<<__Native>>
function log_cmd_update(array $server,
                        array $writeOptions,
                        array $updateOptions,
                        array $protocolOptions): void;

/**
 * Callback When Retrieving Next Cursor Batch
 *
 * @param array $server -
 * @param array $info -
 *
 * @return  -
 */
<<__Native>>
function log_getmore(array $server,
                     array $info): void;

/**
 * Callback When Executing KILLCURSOR operations
 *
 * @param array $server -
 * @param array $info -
 *
 * @return  -
 */
<<__Native>>
function log_killcursor(array $server,
                        array $info): void;

/**
 * Callback When Reading the MongoDB reply
 *
 * @param array $server -
 * @param array $messageHeaders -
 * @param array $operationHeaders -
 *
 * @return  -
 */
<<__Native>>
function log_reply(array $server,
                   array $messageHeaders,
                   array $operationHeaders): void;

/**
 * Callback When Writing Batches
 *
 * @param array $server -
 * @param array $writeOptions -
 * @param array $batch -
 * @param array $protocolOptions -
 *
 * @return  -
 */
<<__Native>>
function log_write_batch(array $server,
                         array $writeOptions,
                         array $batch,
                         array $protocolOptions): void;

/**
 * Deserializes a BSON object into a PHP array
 *
 * @param string $bson - The BSON to be deserialized.
 *
 * @return array - Returns the deserialized BSON object.
 */
<<__Native>>
function bson_decode(string $bson): array;

/**
 * Serializes a PHP variable into a BSON string
 *
 * @param mixed $anything - The variable to be serialized.
 *
 * @return string - Returns the serialized string.
 */
<<__Native>>
function bson_encode(mixed $anything): string;

